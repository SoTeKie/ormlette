//// GENERATED BY ORMLETTE. DO NOT EDIT!
{> import ormlette/schema/create as c
{> with tables as List(c.Table)
{> import gleam/string
{> import ormlette/ir/sql
{> import gleam/iterator
{> import ormlette/templates/utils/to_string
{> import ormlette/templates/utils/listy

import decode
import gleam/option.{ type Option }
import gleam/pgo

{% for table as c.Table in tables %}
pub type {{ string.capitalise(table.name) }} {
  {{ string.capitalise(table.name) }}({% for col as c.Column in table.columns %}{{ col.name }}: Option({{ to_string.coltype(col) }}), {% endfor %})
}

pub fn {{ string.capitalise(table.name) }}_decoder(db: pgo.Connection) {
    decode.into({
      {% for col as c.Column in table.columns %}
      use {{ col.name }} <- decode.parameter
      {% endfor %}
      {{ string.capitalise(table.name) }}({% for col as c.Column in table.columns %}{{ col.name }}: {{ col.name }}, {% endfor %})
    })
    {% for i as Int in iterator.to_list(iterator.range(0, list.length(table.columns) - 1)) %}
    |> decode.field(i, decode.optional({{ to_string.decode_type(listy.index(table.columns, i)) }}))
    {% endfor %}
}
{% endfor %}