// DO NOT EDIT: Code generated by matcha from decoder_type.matcha

import gleam/string_builder.{type StringBuilder}
import gleam/list

import ormlette/schema/create as c
import gleam/string
import ormlette/ir/sql
import gleam/iterator
import ormlette/templates/utils/to_string
import ormlette/templates/utils/listy
import gleam/int

pub fn render_builder(tables tables: List(c.Table)) -> StringBuilder {
    let builder = string_builder.from_string("")
    let builder = string_builder.append(builder, "//// GENERATED BY ORMLETTE. DO NOT EDIT!
")
    let builder = string_builder.append(builder, "
import decode
import gleam/option.{ type Option }
import gleam/pgo

")
    let builder = list.fold(tables, builder, fn(builder, table: c.Table) {
            let builder = string_builder.append(builder, "
pub type ")
    let builder = string_builder.append(builder, string.capitalise(table.name))
    let builder = string_builder.append(builder, " {
  ")
    let builder = string_builder.append(builder, string.capitalise(table.name))
    let builder = string_builder.append(builder, "(")
    let builder = list.fold(table.columns, builder, fn(builder, col: c.Column) {
            let builder = string_builder.append(builder, col.name)
    let builder = string_builder.append(builder, ": Option(")
    let builder = string_builder.append(builder, to_string.coltype(col))
    let builder = string_builder.append(builder, "), ")

        builder
})
    let builder = string_builder.append(builder, ")
}

pub fn ")
    let builder = string_builder.append(builder, table.name)
    let builder = string_builder.append(builder, "_decoder() {
    decode.into({
      ")
    let builder = list.fold(table.columns, builder, fn(builder, col: c.Column) {
            let builder = string_builder.append(builder, "
      use ")
    let builder = string_builder.append(builder, col.name)
    let builder = string_builder.append(builder, " <- decode.parameter
      ")

        builder
})
    let builder = string_builder.append(builder, "
      ")
    let builder = string_builder.append(builder, string.capitalise(table.name))
    let builder = string_builder.append(builder, "(")
    let builder = list.fold(table.columns, builder, fn(builder, col: c.Column) {
            let builder = string_builder.append(builder, col.name)
    let builder = string_builder.append(builder, ": ")
    let builder = string_builder.append(builder, col.name)
    let builder = string_builder.append(builder, ", ")

        builder
})
    let builder = string_builder.append(builder, ")
    })
    ")
    let builder = list.fold(iterator.to_list(iterator.range(0, list.length(table.columns) - 1)), builder, fn(builder, i: Int) {
            let builder = string_builder.append(builder, "
    |> decode.field(")
    let builder = string_builder.append(builder, int.to_string(i))
    let builder = string_builder.append(builder, ", decode.optional(")
    let builder = string_builder.append(builder, to_string.decode_type(listy.index(table.columns, i)))
    let builder = string_builder.append(builder, "))
    ")

        builder
})
    let builder = string_builder.append(builder, "
}
")

        builder
})

    builder
}

pub fn render(tables tables: List(c.Table)) -> String {
    string_builder.to_string(render_builder(tables: tables))
}

