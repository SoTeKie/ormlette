// DO NOT EDIT: Code generated by matcha from tables.matcha

import gleam/list
import gleam/string_builder.{type StringBuilder}

import gleam/string
import ormlette/schema/create as c
import ormlette/templates/utils/to_string

pub fn render_builder(tables tables: List(c.Table)) -> StringBuilder {
  let builder = string_builder.from_string("")
  let builder =
    string_builder.append(
      builder,
      "
",
    )
  let builder =
    list.fold(tables, builder, fn(builder, table: c.Table) {
      let builder =
        string_builder.append(
          builder,
          "
pub type ",
        )
      let builder =
        string_builder.append(builder, string.capitalise(table.name))
      let builder =
        string_builder.append(
          builder,
          " {
",
        )
      let builder =
        string_builder.append(builder, string.capitalise(table.name))
      let builder =
        string_builder.append(
          builder,
          "(
",
        )
      let builder =
        list.fold(table.columns, builder, fn(builder, col: c.Column) {
          let builder =
            string_builder.append(
              builder,
              "
   ",
            )
          let builder = string_builder.append(builder, col.name)
          let builder =
            string_builder.append(
              builder,
              ": String,
",
            )

          builder
        })
      let builder =
        string_builder.append(
          builder,
          "
    )
}

pub fn ",
        )
      let builder = string_builder.append(builder, string.lowercase(table.name))
      let builder = string_builder.append(builder, "() -> ")
      let builder =
        string_builder.append(builder, string.capitalise(table.name))
      let builder =
        string_builder.append(
          builder,
          "{
    ",
        )
      let builder =
        string_builder.append(builder, string.capitalise(table.name))
      let builder = string_builder.append(builder, "(")
      let builder =
        list.fold(table.columns, builder, fn(builder, col: c.Column) {
          let builder = string_builder.append(builder, " ")
          let builder = string_builder.append(builder, col.name)
          let builder = string_builder.append(builder, ": \"")
          let builder = string_builder.append(builder, table.name)
          let builder = string_builder.append(builder, ".")
          let builder = string_builder.append(builder, col.name)
          let builder = string_builder.append(builder, "\", ")

          builder
        })
      let builder =
        string_builder.append(
          builder,
          " )
}
",
        )

      builder
    })

  builder
}

pub fn render(tables tables: List(c.Table)) -> String {
  string_builder.to_string(render_builder(tables: tables))
}
