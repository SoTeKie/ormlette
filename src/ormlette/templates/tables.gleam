// DO NOT EDIT: Code generated by matcha from tables.matcha

import gleam/string_builder.{type StringBuilder}
import gleam/list

import ormlette/schema/create as c 
import gleam/string
import ormlette/templates/utils/to_string
import ormlette/templates/utils/combine
import gleam/option
import gleam/io

pub fn render_builder(tables tables: List(c.Table)) -> StringBuilder {
    let builder = string_builder.from_string("")
    let builder = string_builder.append(builder, "
")
    let builder = list.fold(tables, builder, fn(builder, table: c.Table) {
            let builder = string_builder.append(builder, "
pub type ")
    let builder = string_builder.append(builder, string.capitalise(table.name))
    let builder = string_builder.append(builder, " {
")
    let builder = string_builder.append(builder, string.capitalise(table.name))
    let builder = string_builder.append(builder, "(
")
    let builder = list.fold(table.columns, builder, fn(builder, col: c.Column) {
            let builder = string_builder.append(builder, "
   ")
    let builder = string_builder.append(builder, col.name)
    let builder = string_builder.append(builder, ": String,
")

        builder
})
    let builder = string_builder.append(builder, "
    )
}

pub fn ")
    let builder = string_builder.append(builder, string.lowercase(table.name))
    let builder = string_builder.append(builder, "() -> ")
    let builder = string_builder.append(builder, string.replace(string.capitalise(table.name), "_", ""))
    let builder = string_builder.append(builder, "{
    ")
    let builder = string_builder.append(builder, string.capitalise(table.name))
    let builder = string_builder.append(builder, "(")
    let builder = list.fold(table.columns, builder, fn(builder, col: c.Column) {
            let builder = string_builder.append(builder, " ")
    let builder = string_builder.append(builder, col.name)
    let builder = string_builder.append(builder, ": \"")
    let builder = string_builder.append(builder, string.lowercase(table.name))
    let builder = string_builder.append(builder, ".")
    let builder = string_builder.append(builder, col.name)
    let builder = string_builder.append(builder, "\", ")

        builder
})
    let builder = string_builder.append(builder, " )
}

")
    let builder = list.fold(combine.combine(table), builder, fn(builder, combined_table: c.Table) {
            let builder = string_builder.append(builder, "
pub type ")
    let builder = string_builder.append(builder, string.replace(string.capitalise(combined_table.name), "_", ""))
    let builder = string_builder.append(builder, " {
")
    let builder = string_builder.append(builder, string.replace(string.capitalise(combined_table.name), "_", ""))
    let builder = string_builder.append(builder, "(
")
    let builder = list.fold(combine.get_column_info(combined_table), builder, fn(builder, col_info: combine.ColumnInfo) {
            let builder = string_builder.append(builder, "
   ")
    let builder = string_builder.append(builder, col_info.name)
    let builder = string_builder.append(builder, "_")
    let builder = string_builder.append(builder, col_info.reference_table)
    let builder = string_builder.append(builder, ": String,  // Use underscore for field names
")

        builder
})
    let builder = string_builder.append(builder, "
    )
}

pub fn ")
    let builder = string_builder.append(builder, string.lowercase(combined_table.name))
    let builder = string_builder.append(builder, "() -> ")
    let builder = string_builder.append(builder, string.replace(string.capitalise(combined_table.name), "_", ""))
    let builder = string_builder.append(builder, "{
    ")
    let builder = string_builder.append(builder, string.replace(string.capitalise(combined_table.name), "_", ""))
    let builder = string_builder.append(builder, "(")
    let builder = list.fold(combine.get_column_info(combined_table), builder, fn(builder, col_info: combine.ColumnInfo) {
            let builder = string_builder.append(builder, "
    ")
    let builder = string_builder.append(builder, col_info.name)
    let builder = string_builder.append(builder, "_")
    let builder = string_builder.append(builder, col_info.reference_table)
    let builder = string_builder.append(builder, ": \"")
    let builder = string_builder.append(builder, string.lowercase(col_info.name))
    let builder = string_builder.append(builder, ".")
    let builder = string_builder.append(builder, col_info.reference_table)
    let builder = string_builder.append(builder, "\", ")

        builder
})
    let builder = string_builder.append(builder, " )
}

")

        builder
})
    let builder = string_builder.append(builder, "
")

        builder
})

    builder
}

pub fn render(tables tables: List(c.Table)) -> String {
    string_builder.to_string(render_builder(tables: tables))
}

